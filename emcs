#!/usr/bin/env bash

#-----------------------------------------------------------------------#
# handleError:

# to be able to exit entire program from within function
trap "exit 1" TERM
export TOP_PID=$$

handleError () {
  if [ $# -ne 1 ]; then
    1="Unknown error"
  fi

  echo -e "\nError: $1\n"
  kill -s TERM $TOP_PID
}

#-----------------------------------------------------------------------#
# dumpFileList: check directory & dump recursive file list
# $1 = root path                       ie, /media/4000/Audio
# $2 = files label                     ie, files-latest

dumpFileList () {
  if [ $# -eq 2 ]; then
    # check that directory exists
    if [ -d "$1" ]; then
      # save recursive file/dir list to file
      # -printf '%P\n' removes the proceeding ./
      find "$1" -regextype posix-egrep -regex '.+' -printf '%P\n' | \
      sort > "$1/.emcs-$label-$2"
    else
      handleError "'$1' is not a directory"
    fi
  else
    handleError "Lack of args to 'dumpFileList'"
  fi
}

#-----------------------------------------------------------------------#
# removeF: remove file or folder
# $1 = file/folder path                ie, /media/4000/Audio/Phish/...
# $2 = simulate/delete                 ie, 0=simulate 1=delete

removeF () {
  arg=("$@")
  if [ $# -eq 2 ]; then
    # if file or directory exists
    if [ -d "$1" ] || [ -e "$1" ]; then
      # if not a simulation
      if [ "$2" -eq "1" ]; then
        # delete folder/file
        if [ -d "$1" ]; then
          rm -r "$1"
        elif [ -e "$1" ]; then
          rm "$1"
        fi
      fi
      echo -e "$1" # return this value
    fi
  else
    handleError "Lack of args to 'removeF'"
  fi
}

#-----------------------------------------------------------------------#
# determineDeleted:
# $1 = root path                       ie, /media/4000/Audio

determineDeleted () {
  dumpFileList "$1" "files-latest"

  if [ -e "$1/.emcs-$label-files" ]; then
    # exists in 'files', but not in 'files-latest'
    comm -13 "$1/.emcs-$label-files-latest" "$1/.emcs-$label-files" \
    > "$1/.emcs-$label-deleted"
  fi

  rm "$1/.emcs-$label-files-latest"
}

#-----------------------------------------------------------------------#
# removeDeleted: remove from one location what's not in another
# $1 = root path                       ie, /media/4000/Audio
# $2 = other path                      ie, /media/4001/Audio

removeDeleted () {
  determineDeleted "$1"

  if [ -e "$1/.emcs-$label-deleted" ] &&
     [ $(stat -c%s "$1/.emcs-$label-deleted") -gt "0" ]; then

    # simulate delete
    count="0"
    echo -e "Simulate delete from '$2':"
    while read line
    do
      items=("$2/$line" 0)
      r=`removeF "${items[@]}"`

      if [[ "$r" != "" ]]; then
        count=$((count+1))
        echo "$count: $r"
      fi
    done < "$1/.emcs-$label-deleted"

    # actual delete
    if [ "$count" -gt "0" ]; then
      read -p "Actually delete these files/folders? " -n 1 -r
      echo ""
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        while read line
        do
          items=("$2/$line" 1)
          removeF "${items[@]}"
        done < "$1/.emcs-$label-deleted"
        echo -e "Duplicate files from '$2' deleted!\n"
      fi
    fi
  else
    echo -e "Nothing to delete from '$2'"
  fi

  rm "$1/.emcs-$label-deleted"
}

#-----------------------------------------------------------------------#
# main program

# check for minimum required arguments
if [ $# -ne 3 ]; then
  echo -e "\nUsage: emcs [label] [location1] [location2]\n"; exit 1
fi

# save label to be used globally
label=$1

# check first path
dir1=`echo $2 | sed -e 's/\/$//'`
if [ ! -d "$dir1" ]; then
  echo -e "\nError: '$dir1' is not a directory.\n"; exit 1
fi

# check second path
dir2=`echo $3 | sed -e 's/\/$//'`
if [ ! -d "$dir2" ]; then
  echo -e "\nError: '$dir2' is not a directory.\n"; exit 1
fi

echo -e "\nEvolving Music Collection Synchronization (emcs):"
echo -e "Label: $label"
echo -e "Dir1: $dir1"
echo -e "Dir2: $dir2"

echo -e "\nChecking for intentionally deleted files..."

# remove intentionally deleted files
removeDeleted "$dir1" "$dir2"
removeDeleted "$dir2" "$dir1"

echo -e "\nSyncrhonizing  to '$dir2'"
rsync -r -t -v --size-only "$dir1/" "$dir2"

echo -e "\nSyncrhonizing  to '$dir1'"
rsync -r -t -v --size-only "$dir2/" "$dir1"

echo -e "\nSaving updated file list..."
dumpFileList "$dir1" "files"
cp -f "$dir1/.emcs-$label-files" "$dir2/.emcs-$label-files"

echo -e "\nFinished."
